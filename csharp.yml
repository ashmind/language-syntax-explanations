# C# 1

- name: bitwise complement operator
  text: "Bitwise complement operator inverts all bits of a given number."
  link: https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/bitwise-complement-operator
  match: [BitwiseNotExpression]

- name: finalizer 
  text: |
    Finalizers (or destructors) are methods automatically called by Garbage Collector before collecting the object.  
    They are used for last-chance cleanup of unmanaged resources (e.g. files) or memory.

    Also see `IDisposable` \[[Docs](https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/dispose-pattern)\] for a predictables cleanup approach.
  link: https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/destructors
  match: [DestructorDeclaration]

# C# 2

- name: generic
  text: |
    Generics allow types and methods that are not tied to a specific type until used.  
    Different parts of code might use the same generic with different types.
    
    For example, `List<T>` can be created as `List<int>` or `List<string>`.  
    However, once created, `List<int>` will only accept `int` values.
  link: https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/generics/index
  match: [TypeParameterList]
  scope: parent

- name: generic constraint
  text: |
    Generic constraints require types used by the generic to match a certain condition.

    For example, `C<T> where T: struct` means that only value types will be allowed as `T`.  
    In this case, you can use `C<int>` and `C<byte>` -- but not `C<string>`.
  link: https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/generics/constraints-on-type-parameters
  match: [TypeParameterConstraintClause]

- name: anonymous method
  text: |
    Anonymous methods are blocks of code that can be passed around.  
    In modern C#, _lambda expressions_ provide a shorter syntax.

    For example, `delegate(int a) { return a + 1; }` is equivalent to `a => a + 1`.
  link: https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/statements-expressions-operators/anonymous-methods
  match: [AnonymousMethodExpression]

- name: nullable type
  text: |
    Nullable types extend their base types to allow `null` values.  
    For example, `int? i = null` is allowed, even though `int i = null` is not.
  link: https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/nullable-types/index
  match: [NullableType]

- name: iterator syntax
  text: |
    Iterator methods return `IEnumerable`, which is a sequence of values.  
    However, instead of all values at once, they return the values one by one.

    Each `yield return` returns one value, and "pauses" the method until calling code asks for more.  
    For example: <a href="https://sharplab.io/#v2:C4LgTgrgdgNAJiA1AHwAIAYAEqCMBuAWACgNscAWQo41AZjIDZsAmMgdkwG9jNft7cTVOTIAOABQBKLjz5zcATnEAiAEoBTAI4R1AZ2ABLKAHNMANwCGAGx3LJVOXIBmAezDqLAYwAWmcZbBzax1MI0wANWC9KWluIkcEsiVlAAUwF089XXU4TGVMRCCbdXtZRL5FKQdyipxkjW09QxMi21L4xIBfMsxujt4ewTJaAB4jYAA+CKjdKS5HYgBIRcrU9LgITyNTHDtqhNwcbA58Hrkz2uS0lw2tluY9i95D48xmfYX+x1Xr2+3MWiPL7yHBHVAcWgfc7Ay4qAByLkwAFs3OpWnogXI+p0gA===" target="_blank">yield return with foreach (SharpLab)</a>.

    The sequence stops at the end of the method, or at first `yield break`.
  link: https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/iterators
  match: [YieldReturnStatement, YieldBreakStatement]

# C# 3

- name: lambda expression
  text: "Lambda expressions are a kind of anonymous functions — blocks of code that can be passed around."
  link: https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/statements-expressions-operators/lambda-expressions
  match: [ParenthesizedLambdaExpression, SimpleLambdaExpression]

# C# 6

- name: expression-bodied member
  text: |
    Expression bodies are a compact way to represent simple single-line methods and properties.  
    For example, `int M() { return 3; }` can be simplified to `int M() => 3`.
  link: https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-6#expression-bodied-function-members
  match: [ArrowExpressionClause]
  scope: parent

- name: string interpolation
  text: |
    String interpolation allows values to be placed directly into a string using `{}`.  
    For example, if `a` is `1`, `$"result: {a + 1}"` produces `"result: 2"`.
  link: https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-6#string-interpolation
  match: [InterpolatedStringExpression]

# C# 7

- name: tuple
  text: "Tuples are types that group several values together. Values can be named, e.g. `(a: 1, b: 2)` or unnamed, e.g. `(1, 2)`."
  link: https://docs.microsoft.com/en-us/dotnet/csharp/tuples
  match: [TupleType, TupleExpression]

- name: pattern matching
  text: |
    Pattern matching checks whether value matches a condition, and at the same time transforms it into new value(s).  
    For example, `a is int i` checks that `a` is `int`, and if `true` produces a new value `i` equal to `a`, but typed as `int`.
  link: https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7#pattern-matching
  match: [IsPatternExpression, CasePatternSwitchLabel]

- name: local function
  text: "Local functions are methods that can be defined inside other methods, and have access to their local variables."
  link: https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7#local-functions
  match: [LocalFunctionStatement]
  
- name: throw expression
  text: |
    Throw expressions are an extension to standard `throw` that allow it to be used in more locations.  
    For example, `this.x = x ?? throw new ArgumentNullException("x");` is a common use case.
  link: https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7#throw-expressions
  match: [ThrowExpression]

# C# 7.1

- name: default literal
  text: "Syntax `default` can be used instead of `default(SomeType)` when compiler can automatically identify the type."
  link: https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7-1#default-literal-expressions
  match: [DefaultLiteralExpression]

# C# 7.2

# TODO: ref structs and so on (needs better matching, maybe SourcePath)

- name: in parameter
  text: "In parameters are in essence `ref readonly` — passed by reference, but cannot be changed by the method."
  link: https://docs.microsoft.com/en-us/dotnet/csharp/reference-semantics-with-value-types#passing-arguments-by-readonly-reference
  match: [InKeyword]
  scope: parent