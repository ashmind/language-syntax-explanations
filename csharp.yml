# C# 6 and before

# TODO: null conditions, string interpolation, async/await, nameof, extension methods

- name: lambda expression
  text: "Lambda expressions are a kind of anonymous functions — pieces of code that can be passed around."
  link: https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/statements-expressions-operators/lambda-expressions
  match: [ParenthesizedLambdaExpression, SimpleLambdaExpression]

- name: expression-bodied member
  text: |
    Expression bodies is a compact way to represent simple single-line methods and properties.  
    For example, `int M() { return 3; }` can be simplified to `int M() => 3`.
  link: https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-6#expression-bodied-function-members
  match: [ArrowExpressionClause]
  scope: parent

# C# 7

- name: tuple
  text: "Tuples are types that group several values together. Values can be named, e.g. `(a: 1, b: 2)` or unnamed, e.g. `(1, 2)`."
  link: https://docs.microsoft.com/en-us/dotnet/csharp/tuples
  match: [TupleType, TupleExpression]

- name: pattern matching
  text: |
    Pattern matching checks whether value matches a condition, and at the same time transforms it into new value(s).  
    For example, `a is int i` checks that `a` is `int`, and if `true` produces a new value `i` equal to `a`, but typed as `int`.
  link: https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7#pattern-matching
  match: [IsPatternExpression, CasePatternSwitchLabel]

- name: local function
  text: "Local functions are methods that can be defined inside other methods, and have access to their local variables."
  link: https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7#local-functions
  match: [LocalFunctionStatement]
  
- name: throw expression
  text: |
    Throw expressions are an extension to standard `throw` that allow it to be used in more locations.  
    For example, `this.x = x ?? throw new ArgumentNullException("x");` is a common use case.
  link: https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7#throw-expressions
  match: [ThrowExpression]

# C# 7.1

- name: default literal
  text: "Syntax `default` can be used instead of `default(SomeType)` in cases where compiler can automatically identify the type."
  link: https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7-1#default-literal-expressions
  match: [DefaultLiteralExpression]

# C# 7.2

# TODO: ref structs and so on (needs better matching, maybe SourcePath)

- name: in parameter
  text: "In parameters are in essence `ref readonly` — passed by reference, but cannot be changed by the method."
  link: https://docs.microsoft.com/en-us/dotnet/csharp/reference-semantics-with-value-types#passing-arguments-by-readonly-reference
  match: [InKeyword]
  scope: parent